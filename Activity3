class BankAccount:
    def __init__(self, acc_number, acc_holder_name, initial_balance=0):
        self.acc_number = acc_number
        self.acc_holder_name = acc_holder_name
        self.balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposit of ${amount} successful.")
        else:
            print("Invalid amount. Deposit failed.")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
            print(f"Withdrawal of ${amount} successful.")
        else:
            print("Insufficient funds. Withdrawal failed.")

    def display_balance(self):
        print(f"Account Number: {self.acc_number}")
        print(f"Account Holder Name: {self.acc_holder_name}")
        print(f"Balance: ${self.balance}")


# Instantiate objects of class by using parameterized constructor
account1 = BankAccount("123456789", "John Doe", 1000)
account2 = BankAccount("987654321", "Jane Smith")

# Accessing attributes and methods
account1.deposit(500)
account1.withdraw(200)
account1.display_balance()

account2.deposit(1000)
account2.withdraw(200)
account2.display_balance()

This code defines a BankAccount class with attributes `account_number`, `balance`, and `account_holder_name`. It includes methods to deposit, withdraw, and display the balance. You can instantiate objects of the class using a parameterized constructor and access its attributes and methods.
